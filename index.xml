<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>spring-boot-starter-example (0.0.1-SNAPSHOT)</title>
<date>2018-07-01 04:43:40 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1-SNAPSHOT</revnumber>
<date>2018-07-01 04:43:40 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>Travis CI status:
<inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/spring-boot-starter-example.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></simpara>
</preface>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara>spring-boot magic&#8230;&#8203;</simpara>
<simpara>Read github pages <link xl:href="https://daggerok.github.io/spring-boot-starter-example">reference documentation</link></simpara>
<simpara>generated by <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java-spring-boot)</simpara>
</chapter>
<chapter xml:id="implementation">
<title>Implementation</title>
<simpara>To create starter we need minimal projects structure:</simpara>
<itemizedlist>
<listitem>
<simpara>service with functionality we wanna expose / integrate: <literal>hello-service</literal></simpara>
</listitem>
<listitem>
<simpara>module which will be automatically configure that service as far starter was added as a dependency: <literal>hello-service-autoconfigure</literal></simpara>
</listitem>
<listitem>
<simpara>starter module, containing everything needed (hello-service + auto-config + other dependencies): <literal>spring-boot-starter-hello</literal></simpara>
</listitem>
</itemizedlist>
<note>
<simpara>we will be using and testing out starter in project: <literal>spring-boot-starter-hello-tests</literal></simpara>
</note>
<section xml:id="hello-service">
<title>hello-service</title>
<simpara>First, create service with functionality you wanna to share with the world</simpara>
<programlisting language="bash" linenumbering="unnumbered">mkdir hello-service
touch hello-service/pom.xml
# ...</programlisting>
<simpara>That module contains HelloService we wanna expose:</simpara>
<formalpara>
<title>HelloService interface:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">/**
 * Super complex greeting service!
 */
public interface HelloService {

  /**
   * Some javadoc...
   * @param whom who, we salute?
   * @return greeting message
   */
  String sayHello(final String whom);
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>HelloServiceImpl interface:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@RequiredArgsConstructor
public class HelloServiceImpl implements HelloService {

  final String prefix;
  final String suffix;

  @Override
  public String sayHello(String whom) {
    return format("%s %s%s", prefix, whom, suffix);
  }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="hello-service-autoconfigure">
<title>hello-service-autoconfigure</title>
<simpara>Next, crete auto-configuration module for hello-service</simpara>
<programlisting language="bash" linenumbering="unnumbered">mkdir hello-service-autoconfigure
touch hello-service-autoconfigure/pom.xml
# ...</programlisting>
<simpara>That module will depends on <literal>hello-service</literal> module and spring-boot auto-configuration dependencies</simpara>
<formalpara>
<title>file <literal>hello-service-autoconfigure/pom.xml</literal>:</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">  &lt;dependencies&gt;
    &lt;!-- compile --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;optional&gt;true&lt;/optional&gt;
      &lt;groupId&gt;com.github.daggerok&lt;/groupId&gt;
      &lt;artifactId&gt;hello-service&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;!-- optional --&gt;
    &lt;dependency&gt;
      &lt;optional&gt;true&lt;/optional&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;!-- test --&gt;
    &lt;dependency&gt;
      &lt;scope&gt;test&lt;/scope&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</programlisting>
</para>
</formalpara>
<simpara>Here we are creating auto-configuration which is basically will be picked up if <literal>HelloService</literal> class in classpath</simpara>
<formalpara>
<title>file <literal>./hello-service-autoconfigure/src/main/java/com/github/daggerok/hello/config/HelloServiceAutoConfiguration.java</literal>:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">/**
 * Apply auto configuration only if {@link HelloService} class is in classpath.
 */
@Configuration
@RequiredArgsConstructor
@ConditionalOnClass(HelloService.class)
@EnableConfigurationProperties(HelloProperties.class)
public class HelloServiceAutoConfiguration {

  @Bean
  @ConditionalOnMissingBean
  public HelloService helloService(final HelloProperties properties) {
    final Hello prop = properties.getHello();
    return new HelloServiceImpl(prop.getPrefix(), prop.getSuffix());
  }
}</programlisting>
</para>
</formalpara>
<simpara>To make it happens, we need provide <literal>spring.factories</literal> file, which spring-boot will identify and create needed
auto-configurations for us if starter in classpath according to conditions</simpara>
<formalpara>
<title>file <literal>./hello-service-autoconfigure/src/main/java/com/github/daggerok/hello/config/HelloServiceAutoConfiguration.java</literal>:</title>
<para>
<programlisting language="properties" linenumbering="unnumbered">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
com.github.daggerok.hello.config.HelloServiceAutoConfiguration</programlisting>
</para>
</formalpara>
</section>
<section xml:id="spring-boot-starter-hello">
<title>spring-boot-starter-hello</title>
<simpara>Now we are ready to go create starter itself</simpara>
<programlisting language="bash" linenumbering="unnumbered">mkdir spring-boot-starter-hello
touch spring-boot-starter-hello/pom.xml
# ...</programlisting>
<simpara>That starter will define in dependencies everything needed</simpara>
<formalpara>
<title>file <literal>spring-boot-starter-hello/pom.xml</literal>:</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">  &lt;artifactId&gt;spring-boot-starter-hello&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.github.daggerok&lt;/groupId&gt;
      &lt;artifactId&gt;hello-service&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.github.daggerok&lt;/groupId&gt;
      &lt;artifactId&gt;hello-service-autoconfigure&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>that module also has auto-configuration <literal>HelloStarterAutoConfiguration.java</literal>:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">Unresolved directive in index.adoc - include::../spring-boot-starter-hello/src/main/java/com/github/daggerok/starter/HelloStarterAutoConfiguration.java[tags=content]</programlisting>
</para>
</formalpara>
<formalpara>
<title>and <literal>spring.factories</literal> file:</title>
<para>
<programlisting language="properties" linenumbering="unnumbered">Unresolved directive in index.adoc - include::../spring-boot-starter-hello/src/main/resources/META-INF/spring.factories[]</programlisting>
</para>
</formalpara>
<formalpara>
<title>it&#8217;s very important test your auto configuration if it&#8217;s properly works:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">Unresolved directive in index.adoc - include::../spring-boot-starter-hello/src/test/java/com/github/daggerok/starter/HelloStarterAutoConfigurationTests.java[tags=content]</programlisting>
</para>
</formalpara>
<note>
<simpara>Here we are testing that HelloService bean was properly instantiated and found in application context.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="testing">
<title>Testing</title>
<simpara>To test starter, all you need to do is:</simpara>
<formalpara>
<title>1. create module for it:</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">mkdir spring-boot-starter-hello-tests
touch spring-boot-starter-hello-tests/pom.xml
# ...</programlisting>
</para>
</formalpara>
<formalpara>
<title>2. add to your pom.xml started:</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.github.daggerok&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-hello&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>3. and use it like any other spring-boot starters:</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Log4j2
@SpringBootApplication
public class HelloStarterTestApplication {
  public static void main(String[] args) {
    final ConfigurableApplicationContext context = SpringApplication.run(HelloStarterTestApplication.class, args);
    final HelloService helloService = context.getBean(HelloService.class);
    log.info(() -&gt; helloService.sayHello("ololo-trololo"));
  }
}</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/spring-boot-starter-example">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/spring-boot-starter-example">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
<simpara><?asciidoc-hr?></simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=jDchAEHIht0">YouTube: It&#8217;s a Kind of Magic: Under the Covers of Spring Boot - Brian Clozel, Stéphane Nicoll</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=N39hpGAT43s">YouTube: It&#8217;s a kind of magic: under the covers of Spring Boot - Stéphane Nicoll &amp; Andy Wilkinson</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=uof5h-j0IeE">YouTube: It&#8217;s a kind of magic: under the covers of Spring Boot by Stéphane Nicoll &amp; Andy Wilkinson</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/snicoll-demos/hello-service-auto-configuration">GitHub: snicoll-demos/hello-service-auto-configuration</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/snicoll/amqp-10-jms-spring-boot">other GitHub repo</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>